// Pacote opcional, ajuste conforme a estrutura do seu projeto.
// Exemplo: package com.petstop.model;

import java.math.BigDecimal; // Importar BigDecimal para o pre√ßo

/**
 * Representa um Produto no sistema PetStop.
 * Esta classe √© um modelo de dados que corresponde √† tabela 'produtos' no banco de dados.
 * üõí
 */
public class Produto {

    private Long id; // Corresponde √† coluna 'id' (BIGINT AUTO_INCREMENT PRIMARY KEY)
    private String nome; // Corresponde √† coluna 'nome' (VARCHAR(100) NOT NULL)
    private long quantidade; // Corresponde √† coluna 'quantidade' (BIGINT NOT NULL)
    private BigDecimal preco; // Corresponde √† coluna 'preco' (DECIMAL(10,2) NOT NULL)
    private boolean ativo; // Corresponde √† coluna 'ativo' (BOOLEAN NOT NULL)

    /**
     * Construtor padr√£o.
     * Necess√°rio para algumas bibliotecas de persist√™ncia ou frameworks.
     */
    public Produto() {
    }

    /**
     * Construtor completo para criar um objeto Produto com todos os atributos.
     *
     * @param id         O identificador √∫nico do produto (geralmente definido pelo banco de dados).
     * @param nome       O nome do produto.
     * @param quantidade A quantidade em estoque do produto.
     * @param preco      O pre√ßo unit√°rio do produto.
     * @param ativo      True se o produto est√° ativo para venda, false caso contr√°rio.
     */
    public Produto(Long id, String nome, long quantidade, BigDecimal preco, boolean ativo) {
        this.id = id;
        this.nome = nome;
        this.quantidade = quantidade;
        this.preco = preco;
        this.ativo = ativo;
    }

    /**
     * Construtor para criar um novo Produto sem ID (√∫til antes de salvar no banco,
     * onde o ID √© auto-incrementado).
     *
     * @param nome       O nome do produto.
     * @param quantidade A quantidade em estoque do produto.
     * @param preco      O pre√ßo unit√°rio do produto.
     * @param ativo      Se o produto est√° ativo para venda.
     */
    public Produto(String nome, long quantidade, BigDecimal preco, boolean ativo) {
        this.nome = nome;
        this.quantidade = quantidade;
        this.preco = preco;
        this.ativo = ativo;
    }

    // Getters e Setters para todos os atributos

    /**
     * Obt√©m o ID do produto.
     * @return O ID do produto.
     */
    public Long getId() {
        return id;
    }

    /**
     * Define o ID do produto.
     * Geralmente, este m√©todo n√£o √© usado publicamente se o ID √© gerenciado pelo banco de dados.
     * @param id O novo ID do produto.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Obt√©m o nome do produto.
     * @return O nome do produto.
     */
    public String getNome() {
        return nome;
    }

    /**
     * Define o nome do produto.
     * @param nome O novo nome do produto.
     */
    public void setNome(String nome) {
        this.nome = nome;
    }

    /**
     * Obt√©m a quantidade em estoque do produto.
     * @return A quantidade do produto.
     */
    public long getQuantidade() {
        return quantidade;
    }

    /**
     * Define a quantidade em estoque do produto.
     * @param quantidade A nova quantidade do produto.
     */
    public void setQuantidade(long quantidade) {
        this.quantidade = quantidade;
    }

    /**
     * Obt√©m o pre√ßo do produto.
     * @return O pre√ßo do produto.
     */
    public BigDecimal getPreco() {
        return preco;
    }

    /**
     * Define o pre√ßo do produto.
     * @param preco O novo pre√ßo do produto.
     */
    public void setPreco(BigDecimal preco) {
        this.preco = preco;
    }

    /**
     * Verifica se o produto est√° ativo.
     * @return true se o produto est√° ativo, false caso contr√°rio.
     */
    public boolean isAtivo() {
        return ativo;
    }

    /**
     * Define o estado de ativa√ß√£o do produto.
     * @param ativo true se o produto est√° ativo, false caso contr√°rio.
     */
    public void setAtivo(boolean ativo) {
        this.ativo = ativo;
    }

    /**
     * Retorna uma representa√ß√£o em String do objeto Produto.
     * √ötil para debugging e logging.
     * @return Uma string representando o objeto Produto.
     */
    @Override
    public String toString() {
        return "Produto{" +
               "id=" + id +
               ", nome='" + nome + '\'' +
               ", quantidade=" + quantidade +
               ", preco=" + (preco != null ? preco.toPlainString() : "null") + // Formata o BigDecimal para string
               ", ativo=" + ativo +
               '}';
    }

    // Voc√™ pode adicionar m√©todos equals() e hashCode() se precisar comparar objetos Produto
    // ou us√°-los em cole√ß√µes como HashSets ou HashMaps.
    // A implementa√ß√£o de equals e hashCode geralmente considera o 'id' se n√£o for nulo,
    // ou uma combina√ß√£o dos campos que definem a unicidade de um produto.
    /*
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Produto produto = (Produto) o;
        if (id != null ? !id.equals(produto.id) : produto.id != null) return false;
        // Se o ID for nulo, pode comparar outros campos, como o nome.
        // Esta √© uma implementa√ß√£o simples baseada no ID.
        return nome != null ? nome.equals(produto.nome) : produto.nome == null;
    }

    @Override
    public int hashCode() {
        // Se basear no ID para o hashCode se ele n√£o for nulo.
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + (nome != null ? nome.hashCode() : 0);
        return result;
    }
    */
}
